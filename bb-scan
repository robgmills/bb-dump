#!/usr/local/bin/python
import os, sys, git, getpass, collections, stashy
from subprocess import Popen, PIPE

def main(url):
    # TODO: Add validation here
    user = raw_input("Enter your Bitbucket username: ")
    password = getpass.getpass(prompt="Enter your Bitbucket password: ")

    print "Connecting to Bitbucket server"
    try:
        stash = stashy.connect(url, user, password)
    except GenericException as e: # Raised on authentication failure
        print "Authentication failure!"

    project_list = stash.projects.list()

    for project in project_list:
        project_name =  project["name"]
        project_key = project["key"]
        print "%s --------------------------------------" % project_name

        repo_list = stash.projects[project_key].repos.list()

        for repo in repo_list:
            repo_slug = repo["slug"]
            # TODO: Make the actions configurable
            report(stash, project_key, repo_slug)
            #backup(repo)
        #rof

        print "" # pad the next project section
    #rof
    print "Done"

def report(stash, project, repo):
    # Stats we're interested in
    # Person with most comments (server-wide)
    # Person with the most commits (server-wide)
    # Anyone with no PR comments (server-wide)
    # PR min/max/average time to merge/comments
    print "Generating report for %s/%s" % (project, repo)

    # Get the number of branches for the repo
    #repo_branches_len = len(stash.projects[project].repos[repo].branches.list())
    #print "Branches: %d" % repo_branches_len

    #Get the number of changes for the repo
    #repo_changes_len = len(stash.projects[project].repos[repo].changes.list())
    #print "Changes: %d" % repo_changes_len

    # Get the number of PRs for the repo
    repo_prs_open = stash.projects[project].repos[repo].pull_requests.list()
    repo_prs_open_len = len(repo_prs_open)
    print "Total Open PRs: %d" % repo_prs_open_len

    for pr in repo_prs_open:
        print "PR ID: %s" % pr["id"]
        properties = pr["properties"]
        totalActivity = 0

        try:
            totalActivity += properties["openTaskCount"]
            totalActivity += properties["resolvedTaskCount"]
            totalActivity += properties["commentCount"]
        except KeyError:
            "no-op"

        print "Total PR Activity: %d" % totalActivity
        #pr_id = str(pr["id"])
        #repo_pr_commits = stash.projects[project].repos[repo].pull_requests[pr_id].commits()
        #print repo_pr_commits
        #repo_pr_commits_len = len(repo_pr_commits)
        #print "Total commits: %d" % repo_pr_commits_len
        #print repo_pr_commits[0]
        #repo_pr_comments = stash.projects[project].repos[repo].pull_requests[pr_id].comments.list()
        #repo_pr_comments_len = len(repo_pr_comments)
        #print "Total comments: %d" % repo_pr_comments_len
        #print repo_pr_comments[0]
    #rof

def getAmbiguousProperty(dictionary, key):
    try:
        return dictionary[key]
    except KeyError:
        return None

def backup(repo):
    scm_url=""
    repo_slug= repo["slug"] # use the slug because it should be safer for file operations
    output_dir = "dump/%s/%s" % (project_key, repo_slug)
    if os.path.exists(output_dir):
        update(output_dir)
    else:
        clone(repo, output_dir)

def update(git_dir):
    print "Updating %s" % git_dir
    g = git.cmd.Git(git_dir)
    try:
        g.pull()
    except:
        print "[ERROR] Could not pull latest for %s" % git_dir

def clone(repo, to):
    print "Cloning %s to %s" % (repo["name"], to)
    for link in repo["links"]["clone"]:
        if link["name"] == "http":
            scm_url = link["href"]
            break
        #fi
    #rof
    return subcall(["git", "clone", "--recursive", scm_url, to])

def subcall(args):
    p = Popen(args, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    output, err = p.communicate(b"input data that is passed to subprocess' stdin")
    rc = p.returncode
    return (rc, output, err)

def help():
    print "BB-Scan Utility"
    print "Usage: bb-scan <bitbucket_url>"

if __name__ == "__main__":
    try:
        main(sys.argv[1])
    except IndexError: # Raised when a url wasn't provided
        help()
